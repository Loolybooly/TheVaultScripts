local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")

local player = Players.LocalPlayer
local dodge = false
local dodgeUp = false
local dodgeDistance = 10
local dodgeUpDistance = 15
local espEnabled = false
local espObjects = {}
local antiVoidEnabled = false
local floatHeight = -5.1728 -- Target height for anti-void floating
local floatThreshold = -5.5 -- Y position threshold to trigger floating
local freezeEnabled = false
local isFrozen = false
local freezeKey = Enum.KeyCode.F
local originalGravity = Workspace.Gravity
local flyEnabled = false
local flySpeed = 50
local flyKey = Enum.KeyCode.G
local flyBodyVelocity
local noclip = false
local noclipKey = Enum.KeyCode.V
local noclipParts = {}
local originalWalkSpeed = 20
local originalJumpPower = 50
local customWalkSpeed = originalWalkSpeed
local customJumpPower = originalJumpPower

-- Rejoin functions
local function getServerList()
    local servers = {}
    local cursor = ""
    local PlaceId = game.PlaceId
    
    repeat
        local success, response = pcall(function()
            local url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?limit=100&cursor=" .. cursor
            return HttpService:JSONDecode(game:HttpGet(url))
        end)
        
        if success and response and response.data then
            for _, server in ipairs(response.data) do
                if server.playing < server.maxPlayers then
                    table.insert(servers, server.id)
                end
            end
            cursor = response.nextPageCursor
        else
            cursor = nil
        end
    until not cursor
    
    return servers
end

local function hopToServer()
    local servers = getServerList()
    if #servers > 0 then
        TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], player)
    else
        TeleportService:Teleport(game.PlaceId)
    end
end

local function rejoinGame()
    -- Try to get current server ID first
    local success, currentServerId = pcall(function()
        return game.JobId
    end)
    
    if success and currentServerId ~= "" then
        TeleportService:TeleportToPlaceInstance(game.PlaceId, currentServerId, player)
    else
        hopToServer()
    end
end

local function updateHumanoidStats()
    if not player.Character then return end
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.WalkSpeed = customWalkSpeed
        humanoid.JumpPower = customJumpPower
    end
end

player.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid")
    updateHumanoidStats()
end)

if player.Character then
    updateHumanoidStats()
end

local function ToggleFly()
    if not player.Character then return end
    flyEnabled = not flyEnabled
    local hrp = player.Character:FindFirstChild("HumanoidRootPart")
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if flyEnabled then
        flyBodyVelocity = Instance.new("BodyVelocity")
        flyBodyVelocity.Velocity = Vector3.new(0, 0, 0)
        flyBodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        flyBodyVelocity.Parent = hrp
        humanoid.PlatformStand = true
    else
        if flyBodyVelocity then flyBodyVelocity:Destroy() end
        humanoid.PlatformStand = false
    end
end

local function ToggleNoClip()
    if not player.Character then return end
    noclip = not noclip
    if noclip then
        for _, part in pairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") and part.CanCollide then
                table.insert(noclipParts, part)
                part.CanCollide = false
            end
        end
    else
        for _, part in ipairs(noclipParts) do
            if part then
                part.CanCollide = true
            end
        end
        table.clear(noclipParts)
    end
end

local antiVoidFloatVelocity
local function handleAntiVoid()
    if not antiVoidEnabled or not player.Character then return end
    
    local hrp = player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    
    -- Check if below threshold
    if hrp.Position.Y < floatThreshold then
        -- Create or update the BodyVelocity
        if not antiVoidFloatVelocity or not antiVoidFloatVelocity.Parent then
            antiVoidFloatVelocity = Instance.new("BodyVelocity")
            antiVoidFloatVelocity.MaxForce = Vector3.new(0, math.huge, 0)
            antiVoidFloatVelocity.P = 9000
            antiVoidFloatVelocity.Parent = hrp
        end
        
        -- Calculate velocity based on current position
        local targetY = floatHeight
        local currentY = hrp.Position.Y
        local distance = targetY - currentY
        local force = math.clamp(distance * 25, -50, 50)
        
        -- Apply velocity to maintain target height
        antiVoidFloatVelocity.Velocity = Vector3.new(0, force, 0)
        
        -- Keep X and Z velocity from HRP to allow horizontal movement
        local currentVelocity = hrp.Velocity
        hrp.Velocity = Vector3.new(currentVelocity.X, hrp.Velocity.Y, currentVelocity.Z)
    elseif antiVoidFloatVelocity and antiVoidFloatVelocity.Parent then
        -- Remove BodyVelocity when above threshold
        antiVoidFloatVelocity:Destroy()
        antiVoidFloatVelocity = nil
    end
end

RunService.Stepped:Connect(function()
    if noclip and player.Character then
        for _, part in pairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
end)

RunService.Heartbeat:Connect(function()
    if flyEnabled and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = player.Character.HumanoidRootPart
        local cam = Workspace.CurrentCamera
        local moveDirection = Vector3.new(0, 0, 0)
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then moveDirection += cam.CFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then moveDirection -= cam.CFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then moveDirection -= cam.CFrame.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then moveDirection += cam.CFrame.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then moveDirection += Vector3.new(0, 1, 0) end
        if moveDirection.Magnitude > 0 then
            moveDirection = moveDirection.Unit * flySpeed
        end
        flyBodyVelocity.Velocity = moveDirection
    end

    handleAntiVoid()
end)

local function ToggleFreeze()
    if not freezeEnabled or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
    local hrp = player.Character.HumanoidRootPart
    isFrozen = not isFrozen
    if isFrozen then
        hrp.Anchored = true
        hrp.Velocity = Vector3.new(0, 0, 0)
        Workspace.Gravity = 0
    else
        hrp.Anchored = false
        Workspace.Gravity = originalGravity
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == freezeKey and freezeEnabled then
        ToggleFreeze()
    end
    if not gameProcessed and input.KeyCode == flyKey then
        ToggleFly()
    end
    if not gameProcessed and input.KeyCode == noclipKey then
        ToggleNoClip()
    end
    if not gameProcessed and player.Character then
        local hrp = player.Character:FindFirstChild("HumanoidRootPart")
        if input.KeyCode == Enum.KeyCode.Q and dodge and hrp then
            hrp.CFrame = hrp.CFrame + hrp.CFrame.LookVector * dodgeDistance
        elseif input.KeyCode == Enum.KeyCode.Z and dodgeUp and hrp then
            hrp.CFrame = hrp.CFrame + Vector3.new(0, dodgeUpDistance, 0)
        end
    end
end)

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "Slap Battles",
    LoadingTitle = "By The Vault Scripts",
    LoadingSubtitle = "Designed by Looly",
    Theme = "Default",
})

local Tab = Window:CreateTab("Main", 4483362458)

Tab:CreateButton({
    Name = "ðŸ“‹ Copy Discord Invite",
    Callback = function()
        setclipboard("https://discord.gg/NUsQx6pnyQ")
    end
})

-- Added Rejoin Section
Tab:CreateSection("Rejoin")
Tab:CreateButton({
    Name = "Rejoin Game",
    Callback = function()
        Rayfield:Notify({
            Title = "Rejoining",
            Content = "Attempting to rejoin the game...",
            Duration = 3,
            Image = 4483362458,
        })
        rejoinGame()
    end
})

Tab:CreateButton({
    Name = "Server Hop",
    Callback = function()
        Rayfield:Notify({
            Title = "Server Hopping",
            Content = "Finding a new server...",
            Duration = 3,
            Image = 4483362458,
        })
        hopToServer()
    end
})

Tab:CreateSection("Special Features")
Tab:CreateToggle({
    Name = "NoClip (Press V)",
    CurrentValue = false,
    Callback = function(state)
        noclip = state
        ToggleNoClip()
    end
})
Tab:CreateToggle({
    Name = "Enable Freeze (Press F)",
    CurrentValue = false,
    Callback = function(state)
        freezeEnabled = state
        if not state and isFrozen then
            ToggleFreeze()
        end
    end
})

Tab:CreateSection("Player Stuff")
Tab:CreateToggle({
    Name = "Enable Flight (G)",
    CurrentValue = false,
    Callback = function(state)
        if state ~= flyEnabled then
            ToggleFly()
        end
    end
})
Tab:CreateInput({
    Name = "Flight Speed (Default is 50)",
    PlaceholderText = tostring(flySpeed),
    Callback = function(text)
        flySpeed = tonumber(text) or 50
    end
})
Tab:CreateInput({
    Name = "Walk Speed (Default is 20)",
    PlaceholderText = tostring(customWalkSpeed),
    Callback = function(text)
        customWalkSpeed = tonumber(text) or 20
        updateHumanoidStats()
    end
})
Tab:CreateInput({
    Name = "Jump Power (Default is 50, above 332 you'll die)",
    PlaceholderText = tostring(customJumpPower),
    Callback = function(text)
        customJumpPower = tonumber(text) or 50
        updateHumanoidStats()
    end
})

Tab:CreateSection("Antis")
Tab:CreateToggle({
    Name = "Anti Void (Float at -5.1728)",
    Info = "Makes you float at Y: -5.1728 when below Y: -5.5",
    CurrentValue = false,
    Callback = function(state)
        antiVoidEnabled = state
        if not state and antiVoidFloatVelocity and antiVoidFloatVelocity.Parent then
            antiVoidFloatVelocity:Destroy()
            antiVoidFloatVelocity = nil
        end
    end
})

Tab:CreateSection("Slapple Farm")
Tab:CreateToggle({
    Name = "Slapple Farm",
    CurrentValue = false,
    Callback = function(state)
        getgenv().slapfarmspissb = state
        if state then
            task.spawn(function()
                while getgenv().slapfarmspissb do
                    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        for _, v in pairs(Workspace.Arena.island5.Slapples:GetDescendants()) do
                            if v.Name == "Glove" and v:FindFirstChild("TouchInterest") then
                                firetouchinterest(hrp, v, 0)
                                firetouchinterest(hrp, v, 1)
                            end
                        end
                    end
                    task.wait(1)
                end
            end)
        end
    end,
})

Tab:CreateSection("ESP")
Tab:CreateToggle({
    Name = "ESP",
    CurrentValue = false,
    Callback = function(state)
        espEnabled = state
        for _, objs in pairs(espObjects) do
            for _, obj in ipairs(objs) do
                obj:Destroy()
            end
        end
        espObjects = {}
        if not state then
            RunService:UnbindFromRenderStep("ESP")
            return
        end
        local function createESP(plr)
            if plr == player or espObjects[plr] then return end
            local char = plr.Character
            local hrp = char and char:FindFirstChild("HumanoidRootPart")
            if not hrp then return end
            espObjects[plr] = {}
            local gloveBill = Instance.new("BillboardGui", hrp)
            gloveBill.Size = UDim2.new(0, 200, 0, 50)
            gloveBill.StudsOffset = Vector3.new(0, 4.5, 0)
            gloveBill.AlwaysOnTop = true
            local gloveText = Instance.new("TextLabel", gloveBill)
            gloveText.Size = UDim2.new(1, 0, 1, 0)
            gloveText.BackgroundTransparency = 1
            gloveText.TextColor3 = Color3.new(1, 0, 0)
            gloveText.TextStrokeTransparency = 0
            gloveText.TextScaled = false
            gloveText.Font = Enum.Font.SourceSansBold
            gloveText.TextSize = 18
            gloveText.Text = plr:FindFirstChild("leaderstats") and plr.leaderstats:FindFirstChild("Glove") and plr.leaderstats.Glove.Value or "Loading"
            table.insert(espObjects[plr], gloveBill)
            local box = Instance.new("BoxHandleAdornment", hrp)
            box.Size = Vector3.new(2, 2, 1)
            box.Color3 = Color3.new(0.5, 0, 0)
            box.Transparency = 0
            box.AlwaysOnTop = true
            box.Adornee = hrp
            table.insert(espObjects[plr], box)
        end
        local function updateESP()
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= player and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                    if not espObjects[plr] then
                        createESP(plr)
                    end
                end
            end
        end
        RunService:BindToRenderStep("ESP", Enum.RenderPriority.Camera.Value + 1, updateESP)
        Players.PlayerAdded:Connect(function(plr)
            plr.CharacterAdded:Connect(function()
                task.wait(1)
                if espEnabled then createESP(plr) end
            end)
        end)
    end,
})

Tab:CreateSection("GoTo Player")
Tab:CreateInput({
    Name = "Enter Player Name",
    PlaceholderText = "Player's name...",
    Callback = function(playerName)
        local matchingPlayers = {}
        for _, plr in pairs(Players:GetPlayers()) do
            if plr.Name:sub(1, 3):lower() == playerName:sub(1, 3):lower() then
                table.insert(matchingPlayers, plr)
            end
        end
        if #matchingPlayers > 1 then
            game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Rayfield").Frame:FindFirstChild("TextBox").Text = "Which player are you referring to? Please use the full user of the player as there are 2 players with the same starting letters."
        elseif #matchingPlayers == 1 then
            local targetPlayer = matchingPlayers[1]
            if targetPlayer and targetPlayer.Character then
                local targetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                if targetHRP then
                    player.Character.HumanoidRootPart.CFrame = targetHRP.CFrame
                end
            end
        end
    end
})

Tab:CreateSection("Dodge")
Tab:CreateToggle({
    Name = "Dodge (Press Q)",
    CurrentValue = false,
    Callback = function(value)
        dodge = value
    end,
})
Tab:CreateInput({
    Name = "Dodge Distance",
    PlaceholderText = tostring(dodgeDistance),
    Callback = function(text)
        dodgeDistance = tonumber(text) or 10
    end,
})
Tab:CreateToggle({
    Name = "Dodge Up (Press Z)",
    CurrentValue = false,
    Callback = function(value)
        dodgeUp = value
    end,
})
Tab:CreateInput({
    Name = "Dodge Up Distance",
    PlaceholderText = tostring(dodgeUpDistance),
    Callback = function(text)
        dodgeUpDistance = tonumber(text) or 15
    end,
})

Tab:CreateSection("Teleport")
local teleportLocations = {
    ["Main Island"] = Vector3.new(2.1791, -5.173, 5.9531),
    ["Lobby"] = Vector3.new(-900.5245, 328.0385, -2.0989),
    ["Cube of Death Island"] = Vector3.new(-242.0591, -5.2782, 2.3795),
    ["Cube of Death"] = Vector3.new(-270.1338, -5.2782, 0.6983),
    ["Slapple Island"] = Vector3.new(-394.4224, 50.7642, -13.9544),
    ["Cannon Island"] = Vector3.new(251.7035, 33.6846, 189.5923),
    ["Brazil"] = Vector3.new(-810.8936, 305.2643, -1.5613),
    ["Moai Island"] = Vector3.new(194.3255, -15.7160, 2.9079),
    ["Plate"] = workspace.Arena.Plate.CFrame -- Added plate teleport
}

for location, pos in pairs(teleportLocations) do
    Tab:CreateButton({
        Name = "Teleport to " .. location,
        Callback = function()
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                if location == "Plate" then
                    -- Special handling for plate to ensure it works even if plate moves
                    local plate = workspace:FindFirstChild("Arena"):FindFirstChild("Plate")
                    if plate then
                        player.Character.HumanoidRootPart.CFrame = plate.CFrame
                    else
                        Rayfield:Notify({
                            Title = "Error",
                            Content = "Couldn't find the plate!",
                            Duration = 3,
                            Image = 4483362458
                        })
                    end
                else
                    player.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
                end
            end
        end
    })
end

Tab:CreateSection("Badges")
Tab:CreateButton({
    Name = "Auto alchemist badge (Must have plague equipped and autoclicker ready)",
    Callback = function()
        if not player.Character then
            Rayfield:Notify({
                Title = "Error",
                Content = "Character not found!",
                Duration = 5,
                Image = 4483362458,
            })
            return
        end
        local glove = player.Character:FindFirstChild("plague") or player.Character:FindFirstChild("Plague")
        if not glove then
            Rayfield:Notify({
                Title = "Error",
                Content = "Equip the Plague glove first!",
                Duration = 5,
                Image = 4483362458,
            })
            return
        end
        local hrp = player.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        local originalHipHeight = humanoid.HipHeight
        local originalAutoRotate = humanoid.AutoRotate
        local originalPlatformStand = humanoid.PlatformStand
        humanoid.HipHeight = 2
        humanoid.AutoRotate = false
        humanoid.PlatformStand = true
        hrp.Anchored = false
        hrp.AssemblyLinearVelocity = Vector3.new(0,0,0)
        hrp.AssemblyAngularVelocity = Vector3.new(0,0,0)
        local slappedPlayers = {}
        local slapCount = 0
        local maxSlaps = 10000
        local followDuration = 0.8
        local slapCooldown = 0.5
        Rayfield:Notify({
            Title = "Started",
            Content = "Beginning Alchemist auto-slap (Anti-Ragdoll Active)...",
            Duration = 3,
            Image = 4483362458,
        })
        while slapCount < maxSlaps do
            for _, target in pairs(Players:GetPlayers()) do
                if slapCount >= maxSlaps then break end
                if target ~= player and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                    local targetHRP = target.Character.HumanoidRootPart
                    if targetHRP.Position.Y > -10 and targetHRP.Position.Y < 100 and not slappedPlayers[target] then
                        hrp.AssemblyLinearVelocity = Vector3.new(0,0,0)
                        hrp.AssemblyAngularVelocity = Vector3.new(0,0,0)
                        local startTime = tick()
                        local lastValidPosition = targetHRP.Position
                        while tick() - startTime < followDuration do
                            if targetHRP and targetHRP.Parent then
                                lastValidPosition = targetHRP.Position
                                local offsetPosition = lastValidPosition - (targetHRP.CFrame.LookVector * 3) + Vector3.new(0, 2, 0)
                                hrp.CFrame = CFrame.new(offsetPosition, lastValidPosition)
                                hrp.Velocity = Vector3.new(0,0,0)
                                hrp.RotVelocity = Vector3.new(0,0,0)
                            end
                            task.wait()
                        end
                        if targetHRP and targetHRP.Parent then
                            task.wait(0.1)
                            hrp.Velocity = Vector3.new(0,0,0)
                            hrp.RotVelocity = Vector3.new(0,0,0)
                            firetouchinterest(glove, targetHRP, 0)
                            task.wait(0.1)
                            firetouchinterest(glove, targetHRP, 1)
                            slappedPlayers[target] = true
                            slapCount = slapCount + 1
                        end
                        task.wait(slapCooldown)
                    end
                end
            end
            if slapCount < maxSlaps then
                task.wait(0.3)
            end
        end
        humanoid.HipHeight = originalHipHeight
        humanoid.AutoRotate = originalAutoRotate
        humanoid.PlatformStand = originalPlatformStand
        Rayfield:Notify({
            Title = "Completed",
            Content = "Successfully slapped 100 players!",
            Duration = 5,
            Image = 4483362458,
        })
    end
})
